import unittest

from default_model import *
from oldman.core.common import is_blank_node
from oldman.core.exception import OMUniquenessError, OMIriError
from oldman.core.id import PermanentId, TemporaryId


class IriTest(unittest.TestCase):
    def tearDown(self):
        tear_down()

    def test_is_blank_node(self):
        session1 = user_mediator.create_session()
        bob = create_bob(session1)
        self.assertFalse(bob.is_blank_node())
        alice = lp_model.new(session1, name=alice_name, mboxes={alice_mail}, short_bio_en=alice_bio_en)
        # Temporary IRI: a bnode
        self.assertTrue(alice.is_blank_node())
        # Permanent IRI: not a bnode with the ID generator used by this model.
        session1.flush()
        self.assertFalse(alice.is_blank_node())

        key = gpg_model.new(session1, fingerprint="deadbeef", hex_id="deadbeef")
        session1.flush()
        # Permanent IRI: still a bnode because of the ID generator used by this model.
        self.assertTrue(key.is_blank_node())

        # Local skolemized bnodes can be set on the client side (they must be generated by the store side).
        # TODO: except a more precise exception
        with self.assertRaises(Exception):
            lp_model.new(session1, iri="http://localhost/.well-known/genid/2387335")
        session1.close()

    def test_same_document(self):
        session1 = user_mediator.create_session()
        bob1 = create_bob(session1)
        alice1 = create_alice(session1)
        self.assertFalse(bob1.in_same_document(alice1))

        partial_uri = u"http://localhost/persons"
        bob_uri = partial_uri + "#bob"
        bob2 = lp_model.new(session1, iri=bob_uri, name=bob_name, blog=bob_blog, mboxes=bob_emails,
                            short_bio_en=bob_bio_en, short_bio_fr=bob_bio_fr)
        alice_uri = partial_uri + "#alice"
        alice2 = lp_model.new(session1, iri=alice_uri, name=alice_name, mboxes={alice_mail}, short_bio_en=alice_bio_en)
        self.assertTrue(bob2.in_same_document(alice2))
        session1.flush()
        self.assertTrue(bob2.in_same_document(alice2))
        session1.close()

    def test_iri_uniqueness(self):
        session1 = user_mediator.create_session()
        bob = create_bob(session1)
        bob_iri = bob.id.iri
        session1.close()

        session2 = user_mediator.create_session()
        lp_model.new(session2, iri=bob_iri, name=bob_name, mboxes=bob_emails, short_bio_en=u"Will not exist")
        with self.assertRaises(OMUniquenessError):
            session2.flush()
        session2.close()

        # Forces the creation (by claiming your are not)
        # Dangerous!
        session3 = user_mediator.create_session()
        short_bio_en = u"Is forced to exist"
        bob2 = lp_model.new(session3, iri=bob_iri, name=bob_name, mboxes=bob_emails, short_bio_en=short_bio_en,
                            is_new=False)
        session3.flush()
        self.assertEquals(bob2.short_bio_en, short_bio_en)
        session3.close()

    def test_om_id(self):
        with self.assertRaises(OMIriError):
            PermanentId("#me")

        iri2 = "http://example.com/"
        id2 = PermanentId(iri2)
        self.assertEquals(id2.hashless_iri, iri2)
        self.assertEquals(id2.fragment, "")
        self.assertEquals(id2.iri, iri2)
        self.assertFalse(id2.is_blank_node)
        self.assertTrue(id2.is_permanent)

        iri3 = "http://localhost/.well-known/genid/iri3"
        id3 = TemporaryId(suggested_hashless_iri=iri3, suggested_iri_fragment="")
        self.assertEquals(id3.hashless_iri, iri3)
        self.assertEquals(id3.fragment, "")
        self.assertEquals(id3.iri, iri3+"#")
        self.assertFalse(id3.is_permanent)

        iri4 = iri2 + "#"
        id4 = PermanentId(iri4)
        self.assertEquals(id4.hashless_iri, iri2)
        self.assertEquals(id4.fragment, "")
        self.assertEquals(id4.iri, iri4)

        id5 = TemporaryId(suggested_hashless_iri=iri3)
        self.assertEquals(id5.hashless_iri, iri3)
        self.assertNotEquals(id5.iri, iri3)
        self.assertEquals(id5.hashless_iri+"#"+id5.fragment, id5.iri)

        id6 = TemporaryId(suggested_hashless_iri=iri3)
        self.assertNotEquals(id6.iri, id5.iri)
        self.assertNotEquals(id6.fragment, id5.fragment)

        fragment7 = "me"
        id7 = TemporaryId(suggested_iri_fragment=fragment7)
        self.assertEquals(id7.fragment, fragment7)
        self.assertEquals(id7.suggested_fragment, fragment7)
        self.assertEquals(id7.hashless_iri+"#"+id7.fragment, id7.iri)
        self.assertTrue(len(id7.hashless_iri) > 0)

        # With a non-skolemized IRI
        id8 = TemporaryId(suggested_hashless_iri=iri2)
        self.assertNotEquals(id8.hashless_iri, iri2)
        self.assertTrue(is_blank_node(id8.hashless_iri))
        self.assertTrue(id8.is_blank_node)
        self.assertEquals(id8.suggested_hashless_iri, iri2)