class RootMediator:
    """TODO: describe """

    def get(self, id=None, types=None, hashless_iri=None, eager_with_reversed_attributes=True, **kwargs):
        """See :func:`oldman.store.datastore.DataStore.get`."""
        raise NotImplementedError("Should be implemented by a concrete implementation.")


class UserMediator(RootMediator):
    """
    TODO: describe

    """

    def declare_method(self, method, name, class_iri):
        """Attaches a method to the :class:`~oldman.resource.Resource` objects that are instances of a given RDFS class.

        Like in Object-Oriented Programming, this method can be overwritten by attaching a homonymous
        method to a class that has a higher inheritance priority (such as a sub-class).

        To benefit from this method (or an overwritten one), :class:`~oldman.resource.Resource` objects
        must be associated to a :class:`~oldman.model.Model` that corresponds to the RDFS class or to one of its
        subclasses.

        :param method: Python function that takes as first argument a :class:`~oldman.resource.Resource` object.
        :param name: Name assigned to this method.
        :param class_iri: Targeted RDFS class. If not overwritten, all the instances
                          (:class:`~oldman.resource.Resource` objects) should inherit this method.

        """
        raise NotImplementedError("Should be implemented by a concrete implementation.")

    def new(self, id=None, types=None, hashless_iri=None, collection_iri=None, **kwargs):
        """Creates a new :class:`~oldman.resource.Resource` object **without saving it** in the `data_store`.

        The `kwargs` dict can contains regular attribute key-values that will be assigned to
        :class:`~oldman.attribute.OMAttribute` objects.

        :param id: IRI of the new resource. Defaults to `None`.
                   If not given, the IRI is generated by the IRI generator of the main model.
        :param types: IRIs of RDFS classes the resource is instance of. Defaults to `None`.
                      Note that these IRIs are used to find the models of the resource
                      (see :func:`~oldman.resource.manager.ResourceManager.find_models_and_types` for more details).
        :param hashless_iri: hash-less IRI that MAY be considered when generating an IRI for the new resource.
                         Defaults to `None`. Ignored if `id` is given. Must be `None` if `collection_iri` is given.
        :param collection_iri: IRI of the controller to which this resource belongs. This information
                        is used to generate a new IRI if no `id` is given. The IRI generator may ignore it.
                        Defaults to `None`. Must be `None` if `hashless_iri` is given.
        :return: A new :class:`~oldman.resource.Resource` object.
        """
        raise NotImplementedError("Should be implemented by a concrete implementation.")

    def create(self, id=None, types=None, hashless_iri=None, collection_iri=None, **kwargs):
        """Creates a new resource and save it in the `data_store`.

        See :func:`~oldman.resource.manager.ResourceManager.new` for more details.
        """
        raise NotImplementedError("Should be implemented by a concrete implementation.")

    def filter(self, types=None, hashless_iri=None, limit=None, eager=False, pre_cache_properties=None, **kwargs):
        """See :func:`oldman.store.datastore.DataStore.filter`."""
        raise NotImplementedError("Should be implemented by a concrete implementation.")

    def sparql_filter(self, query):
        """See :func:`oldman.store.datastore.DataStore.sparql_filter`."""
        raise NotImplementedError("Should be implemented by a concrete implementation.")

    def use_store_model(self, class_iri, data_store=None):
        raise NotImplementedError("Should be implemented by a concrete implementation.")

    def import_store_models(self):
        """TODO: check possible conflicts with local models."""
        raise NotImplementedError("Should be implemented by a concrete implementation.")

    def get_client_model(self, class_name_or_iri):
        raise NotImplementedError("Should be implemented by a concrete implementation.")


class ResourceMediator(RootMediator):
    """
        Interface for (accessible by) resources.

        TODO: explain further.
    """

    @property
    def model_manager(self):
        raise NotImplementedError("Should be implemented by a concrete implementation.")

    def save_resource(self, client_resource, is_end_user):
        """TODO: describe"""
        raise NotImplementedError("Should be implemented by a concrete implementation.")

    def delete_resource(self, client_resource):
        """TODO: describe"""
        raise NotImplementedError("Should be implemented by a concrete implementation.")